package org.theoriok.adventofcode.y2021;

import static org.assertj.core.api.Assertions.assertThat;
import static org.theoriok.adventofcode.y2021.Day24.Variable.X;
import static org.theoriok.adventofcode.y2021.Day24.Variable.Y;

import org.junit.jupiter.api.Test;

import java.util.EnumMap;
import java.util.List;

class Day24Test {
    private static final List<String> LIST = List.of(
        "inp w",
        "mul x 0",
        "add x z",
        "mod x 26",
        "div z 1",
        "add x 14",
        "eql x w",
        "eql x 0",
        "mul y 0",
        "add y 25",
        "mul y x",
        "add y 1",
        "mul z y",
        "mul y 0",
        "add y w",
        "add y 16",
        "mul y x",
        "add z y",
        "inp w",
        "mul x 0",
        "add x z",
        "mod x 26",
        "div z 1",
        "add x 11",
        "eql x w",
        "eql x 0",
        "mul y 0",
        "add y 25",
        "mul y x",
        "add y 1",
        "mul z y",
        "mul y 0",
        "add y w",
        "add y 3",
        "mul y x",
        "add z y",
        "inp w",
        "mul x 0",
        "add x z",
        "mod x 26",
        "div z 1",
        "add x 12",
        "eql x w",
        "eql x 0",
        "mul y 0",
        "add y 25",
        "mul y x",
        "add y 1",
        "mul z y",
        "mul y 0",
        "add y w",
        "add y 2",
        "mul y x",
        "add z y",
        "inp w",
        "mul x 0",
        "add x z",
        "mod x 26",
        "div z 1",
        "add x 11",
        "eql x w",
        "eql x 0",
        "mul y 0",
        "add y 25",
        "mul y x",
        "add y 1",
        "mul z y",
        "mul y 0",
        "add y w",
        "add y 7",
        "mul y x",
        "add z y",
        "inp w",
        "mul x 0",
        "add x z",
        "mod x 26",
        "div z 26",
        "add x -10",
        "eql x w",
        "eql x 0",
        "mul y 0",
        "add y 25",
        "mul y x",
        "add y 1",
        "mul z y",
        "mul y 0",
        "add y w",
        "add y 13",
        "mul y x",
        "add z y",
        "inp w",
        "mul x 0",
        "add x z",
        "mod x 26",
        "div z 1",
        "add x 15",
        "eql x w",
        "eql x 0",
        "mul y 0",
        "add y 25",
        "mul y x",
        "add y 1",
        "mul z y",
        "mul y 0",
        "add y w",
        "add y 6",
        "mul y x",
        "add z y",
        "inp w",
        "mul x 0",
        "add x z",
        "mod x 26",
        "div z 26",
        "add x -14",
        "eql x w",
        "eql x 0",
        "mul y 0",
        "add y 25",
        "mul y x",
        "add y 1",
        "mul z y",
        "mul y 0",
        "add y w",
        "add y 10",
        "mul y x",
        "add z y",
        "inp w",
        "mul x 0",
        "add x z",
        "mod x 26",
        "div z 1",
        "add x 10",
        "eql x w",
        "eql x 0",
        "mul y 0",
        "add y 25",
        "mul y x",
        "add y 1",
        "mul z y",
        "mul y 0",
        "add y w",
        "add y 11",
        "mul y x",
        "add z y",
        "inp w",
        "mul x 0",
        "add x z",
        "mod x 26",
        "div z 26",
        "add x -4",
        "eql x w",
        "eql x 0",
        "mul y 0",
        "add y 25",
        "mul y x",
        "add y 1",
        "mul z y",
        "mul y 0",
        "add y w",
        "add y 6",
        "mul y x",
        "add z y",
        "inp w",
        "mul x 0",
        "add x z",
        "mod x 26",
        "div z 26",
        "add x -3",
        "eql x w",
        "eql x 0",
        "mul y 0",
        "add y 25",
        "mul y x",
        "add y 1",
        "mul z y",
        "mul y 0",
        "add y w",
        "add y 5",
        "mul y x",
        "add z y",
        "inp w",
        "mul x 0",
        "add x z",
        "mod x 26",
        "div z 1",
        "add x 13",
        "eql x w",
        "eql x 0",
        "mul y 0",
        "add y 25",
        "mul y x",
        "add y 1",
        "mul z y",
        "mul y 0",
        "add y w",
        "add y 11",
        "mul y x",
        "add z y",
        "inp w",
        "mul x 0",
        "add x z",
        "mod x 26",
        "div z 26",
        "add x -3",
        "eql x w",
        "eql x 0",
        "mul y 0",
        "add y 25",
        "mul y x",
        "add y 1",
        "mul z y",
        "mul y 0",
        "add y w",
        "add y 4",
        "mul y x",
        "add z y",
        "inp w",
        "mul x 0",
        "add x z",
        "mod x 26",
        "div z 26",
        "add x -9",
        "eql x w",
        "eql x 0",
        "mul y 0",
        "add y 25",
        "mul y x",
        "add y 1",
        "mul z y",
        "mul y 0",
        "add y w",
        "add y 4",
        "mul y x",
        "add z y",
        "inp w",
        "mul x 0",
        "add x z",
        "mod x 26",
        "div z 26",
        "add x -12",
        "eql x w",
        "eql x 0",
        "mul y 0",
        "add y 25",
        "mul y x",
        "add y 1",
        "mul z y",
        "mul y 0",
        "add y w",
        "add y 6",
        "mul y x",
        "add z y"
    );

    @Test
    void firstMethod() {
        var day = new Day24(LIST);

        var result = day.firstMethod();

        assertThat(result).isEqualTo(59996912981939L);
    }

    @Test
    void secondMethod() {
        var day = new Day24(LIST);

        var result = day.secondMethod();

        assertThat(result).isEqualTo(17241911811915L);
    }

    @Test
    void operationTest() {
        var variableShortEnumMap = new EnumMap<Day24.Variable, Short>(Day24.Variable.class);
        variableShortEnumMap.put(X, (short) 5);
        variableShortEnumMap.put(Y, (short) 2);
        var operation = new Day24.Operation(Day24.Operator.DIVIDE, List.of("x", "y"));

        operation.apply(variableShortEnumMap, (short) 0);

        assertThat(variableShortEnumMap.get(X)).isEqualTo((short) 2);
    }

    @Test
    void operationTest2() {
        var variableShortEnumMap = new EnumMap<Day24.Variable, Short>(Day24.Variable.class);
        variableShortEnumMap.put(X, (short) 5);
        variableShortEnumMap.put(Y, (short) 2);
        var operation = new Day24.Operation(Day24.Operator.EQUAL, List.of("x", "y"));

        operation.apply(variableShortEnumMap, (short) 0);

        assertThat(variableShortEnumMap.get(X)).isEqualTo((short) 0);
    }
}